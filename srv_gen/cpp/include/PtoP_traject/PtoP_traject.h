/* Auto-generated by genmsg_cpp for file /opt/ros/melodic/share/PtoP_traject/srv/PtoP_traject.srv */
#ifndef PTOP_TRAJECT_SERVICE_PTOP_TRAJECT_H
#define PTOP_TRAJECT_SERVICE_PTOP_TRAJECT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace PtoP_traject
{
template <class ContainerAllocator>
struct PtoP_trajectRequest_ {
  typedef PtoP_trajectRequest_<ContainerAllocator> Type;

  PtoP_trajectRequest_()
  : point1()
  , point2()
  , count(0)
  {
  }

  PtoP_trajectRequest_(const ContainerAllocator& _alloc)
  : point1(_alloc)
  , point2(_alloc)
  , count(0)
  {
  }

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _point1_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  point1;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _point2_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  point2;

  typedef int32_t _count_type;
  int32_t count;


  typedef boost::shared_ptr< ::PtoP_traject::PtoP_trajectRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::PtoP_traject::PtoP_trajectRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct PtoP_trajectRequest
typedef  ::PtoP_traject::PtoP_trajectRequest_<std::allocator<void> > PtoP_trajectRequest;

typedef boost::shared_ptr< ::PtoP_traject::PtoP_trajectRequest> PtoP_trajectRequestPtr;
typedef boost::shared_ptr< ::PtoP_traject::PtoP_trajectRequest const> PtoP_trajectRequestConstPtr;



template <class ContainerAllocator>
struct PtoP_trajectResponse_ {
  typedef PtoP_trajectResponse_<ContainerAllocator> Type;

  PtoP_trajectResponse_()
  : jointq()
  {
  }

  PtoP_trajectResponse_(const ContainerAllocator& _alloc)
  : jointq(_alloc)
  {
  }

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _jointq_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  jointq;


  typedef boost::shared_ptr< ::PtoP_traject::PtoP_trajectResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::PtoP_traject::PtoP_trajectResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct PtoP_trajectResponse
typedef  ::PtoP_traject::PtoP_trajectResponse_<std::allocator<void> > PtoP_trajectResponse;

typedef boost::shared_ptr< ::PtoP_traject::PtoP_trajectResponse> PtoP_trajectResponsePtr;
typedef boost::shared_ptr< ::PtoP_traject::PtoP_trajectResponse const> PtoP_trajectResponseConstPtr;


struct PtoP_traject
{

typedef PtoP_trajectRequest Request;
typedef PtoP_trajectResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct PtoP_traject
} // namespace PtoP_traject

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::PtoP_traject::PtoP_trajectRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::PtoP_traject::PtoP_trajectRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::PtoP_traject::PtoP_trajectRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "5a92df054da3adeaf518b77711d033d0";
  }

  static const char* value(const  ::PtoP_traject::PtoP_trajectRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x5a92df054da3adeaULL;
  static const uint64_t static_value2 = 0xf518b77711d033d0ULL;
};

template<class ContainerAllocator>
struct DataType< ::PtoP_traject::PtoP_trajectRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "PtoP_traject/PtoP_trajectRequest";
  }

  static const char* value(const  ::PtoP_traject::PtoP_trajectRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::PtoP_traject::PtoP_trajectRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64[] point1\n\
float64[] point2\n\
int32      count\n\
\n\
";
  }

  static const char* value(const  ::PtoP_traject::PtoP_trajectRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::PtoP_traject::PtoP_trajectResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::PtoP_traject::PtoP_trajectResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::PtoP_traject::PtoP_trajectResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cc91f10075076efdf8b93b60e8451572";
  }

  static const char* value(const  ::PtoP_traject::PtoP_trajectResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xcc91f10075076efdULL;
  static const uint64_t static_value2 = 0xf8b93b60e8451572ULL;
};

template<class ContainerAllocator>
struct DataType< ::PtoP_traject::PtoP_trajectResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "PtoP_traject/PtoP_trajectResponse";
  }

  static const char* value(const  ::PtoP_traject::PtoP_trajectResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::PtoP_traject::PtoP_trajectResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64[] jointq\n\
\n\
\n\
\n\
";
  }

  static const char* value(const  ::PtoP_traject::PtoP_trajectResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::PtoP_traject::PtoP_trajectRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.point1);
    stream.next(m.point2);
    stream.next(m.count);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct PtoP_trajectRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::PtoP_traject::PtoP_trajectResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.jointq);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct PtoP_trajectResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<PtoP_traject::PtoP_traject> {
  static const char* value() 
  {
    return "8197c829520272ad70dbf7b7299eea4c";
  }

  static const char* value(const PtoP_traject::PtoP_traject&) { return value(); } 
};

template<>
struct DataType<PtoP_traject::PtoP_traject> {
  static const char* value() 
  {
    return "PtoP_traject/PtoP_traject";
  }

  static const char* value(const PtoP_traject::PtoP_traject&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<PtoP_traject::PtoP_trajectRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "8197c829520272ad70dbf7b7299eea4c";
  }

  static const char* value(const PtoP_traject::PtoP_trajectRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<PtoP_traject::PtoP_trajectRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "PtoP_traject/PtoP_traject";
  }

  static const char* value(const PtoP_traject::PtoP_trajectRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<PtoP_traject::PtoP_trajectResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "8197c829520272ad70dbf7b7299eea4c";
  }

  static const char* value(const PtoP_traject::PtoP_trajectResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<PtoP_traject::PtoP_trajectResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "PtoP_traject/PtoP_traject";
  }

  static const char* value(const PtoP_traject::PtoP_trajectResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // PTOP_TRAJECT_SERVICE_PTOP_TRAJECT_H

